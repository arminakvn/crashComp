// Generated by CoffeeScript 1.7.1
(function() {
  var addChainedAttributeAccessor, draw, timeout,
    __slice = [].slice;

  L.ParaText = L.Class.extend({
    initialize: function(text) {
      this.text = text;
      this.properties = {
        id: 0,
        members: [],
        _margin: {
          t: 20,
          l: 30,
          b: 30,
          r: 30
        },
        relations: {},
        lat: 0,
        long: 0
      };
    },
    addTo: function(map) {
      map.addLayer(this);
      return this;
    },
    customTimeFormat: function(d) {
      var format;
      format = d3.time.format.multi([
        [
          ".%L", function(d) {
            return d.getMilliseconds();
          }
        ], [
          ":%S", function(d) {
            return d.getSeconds();
          }
        ], [
          "%I:%M", function(d) {
            return d.getMinutes();
          }
        ], [
          "%I %p", function(d) {
            return d.getHours();
          }
        ], [
          "%a %d", function(d) {
            return d.getDay() && d.getDate() !== 1;
          }
        ], [
          "%b %d", function(d) {
            return d.getDate() !== 1;
          }
        ], [
          "%B", function(d) {
            return d.getMonth();
          }
        ], [
          "%Y", function() {
            return true;
          }
        ]
      ]);
      return format(d);
    },
    removeAnyLocation: function() {
      return d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g").data([]).exit().remove();
    },
    _projectPoint: function(x) {
      var point;
      point = this._m.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
      return [point.x, point.y];
    },
    getDirectionsFromGoogle: function(featureGroup) {},
    setViewByLocation: function(d) {
      return this._m.setView(new L.LatLng(d.lat, d.long), 19, {
        animation: true,
        duration: 50
      });
    },
    showLocation: function(d) {
      var featureData;
      featureData = [];
      featureData.push(new L.LatLng(d.coordinates.latitude, d.coordinates.longitude));
      this._g = d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g");
      return this._g.data(featureData).enter().append("g").append("circle").attr("r", 0).attr("stroke", "white").attr("fill", "none").attr("stroke-width", "10").attr("cx", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).x;
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).y;
        };
      })(this)).transition().delay(120).duration(1000).attr("r", 80).attr("stroke", "gray").attr("stroke-width", "0").attr("fill", "none");
    },
    getD3: function() {
      this._count = 0;
      this._canvas = $(".canvas");
      this._width = this._canvas.width() - this.properties._margin.l - this.properties._margin.r;
      this._height = this._canvas.height() - this.properties._margin.t - this.properties._margin.b;
      this._svg = d3.select(".").append("svg").attr("width", this._width + this.properties._margin.l + this.properties._margin.r).attr("height", this._height + this.properties._margin.t + this.properties._margin.b).append("g").attr("transform", "translate(" + this.properties._margin.l + "," + this.properties._margin.t + ")");
      this._svg.selectAll("text").data(this.properties.text).enter().append("text").attr("width", 2400).attr("height", 200).style("font-family", "Impact").attr("fill", "black").text(function(d) {
        return d.description;
      }).on("mouseover", function() {
        d3.select(this).transition().duration(300).style("fill", "gray");
      }).on("mouseout", function() {
        d3.select(this).transition().duration(300).style("fill", "black");
      }).transition().delay(0).duration(1).each("start", function() {
        d3.select(this).transition().duration(1).attr("y", (this._count + 1) * 30);
        this._count = this._count + 1;
      }).transition().duration(11).delay(1).style("opacity", 1);
      this._count = this._count + 1;
      return this._svg;
    },
    makeD3onMap: function() {
      var featureData, key, value, _ref;
      this._map = this._m;
      this._project = function(x) {
        var point;
        point = this._map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
        return [point.x, point.y];
      };
      this._el = d3.select(this._map.getPanes().overlayPane).append("svg");
      this._g = this._el.append("g").attr("class", (this.properties.svgClass ? this.properties.svgClass + " leaflet-zoom-hide" : "leaflet-zoom-hide"));
      featureData = [];
      _ref = this.text;
      for (key in _ref) {
        value = _ref[key];
        featureData.push(new L.LatLng(value.coordinates.latitude, value.coordinates.longitude));
      }
      this._g = d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g");
      this._g.data(featureData).enter().append("g").append("circle").attr("r", 0).attr("stroke", "white").attr("fill", "none").attr("stroke-width", "10").attr("cx", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).x;
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).y;
        };
      })(this)).transition().delay(120).duration(1000).attr("r", 80).attr("stroke", "gray").attr("stroke-width", "10").attr("fill", "none");
      return this._g;
    },
    makeHeatMap: function(d) {
      var coordinates, draw, e, key, monthNameFormat, timeout, value, _ref;
      if (this._heat) {
        this._m.removeLayer(this._heat);
      }
      monthNameFormat = d3.time.format("%B");
      console.log(d);
      draw = true;
      coordinates = [];
      _ref = this.text;
      for (key in _ref) {
        value = _ref[key];
        try {
          if (monthNameFormat(new Date(d3.time.format.iso.parse(value.date_time))) === monthNameFormat(d.x)) {
            coordinates.push(new L.LatLng(value.coordinates.latitude, value.coordinates.longitude));
          }
        } catch (_error) {
          e = _error;
          if (monthNameFormat(new Date(d3.time.format.iso.parse(value.date_time))) === monthNameFormat(d.x)) {
            coordinates.push(new L.LatLng(value.address.latitude, value.address.longitude));
          }
        }
      }
      this._heat = L.heatLayer(coordinates, {
        maxZoom: 16
      });
      this._heat.addTo(this._m);
      timeout = void 0;
      if (this._viewSet === void 0) {
        this._viewSet = this._m.getCenter();
      }
      if (this._viewZoom === void 0) {
        this._zoomSet = this._m.getZoom();
      }
      this._m.on("load", function() {});
      this._m.setView(new L.LatLng(this._viewSet.lat, this._viewSet.lng), this._viewZoom);
      return;
      return this._m.on({
        zoomend: (function(_this) {
          return function() {
            if (_this._m.getZoom() > 16) {
              _this._m.removeLayer(_this._heat);
            }
            if (_this._m.getZoom() < 16) {
              return _this._m.addLayer(_this._heat);
            }
          };
        })(this),
        movestart: function() {
          draw = false;
        },
        moveend: function() {
          draw = true;
        },
        mousemove: (function(_this) {
          return function(e) {};
        })(this)
      });
    },
    makeDiv: function(name, position) {
      var divControl;
      divControl = L.Control.extend({
        initialize: (function(_this) {
          return function() {
            var disable3D, _domEl, _domObj;
            _domEl = L.DomUtil.create('div', "container " + name + "-info");
            L.DomUtil.enableTextSelection(_domEl);
            _this._m.getContainer().getElementsByClassName("leaflet-control-container")[0].appendChild(_domEl);
            _domObj = $(L.DomUtil.get(_domEl));
            _domObj.css('width', $(_this._m.getContainer())[0].clientWidth);
            _domObj.css('height', $(_this._m.getContainer())[0].clientHeight / 4);
            _domObj.css('background-color', 'gray');
            L.DomUtil.setOpacity(L.DomUtil.get(_domEl), 0.8);
            return L.DomUtil.setPosition(L.DomUtil.get(_domEl), L.point(0, $(_this._m.getContainer())[0].clientHeight / 2 + $(_this._m.getContainer())[0].clientHeight / 4), disable3D = 0);
          };
        })(this)
      });
      return new divControl();
    },
    addControlToDiv: function(controlerDiv) {
      var controlerDivEl, layerSwitchForm, layerSwitchInput, layerSwitchInputRem;
      console.log(this.text);
      controlerDivEl = this._m.getContainer().getElementsByClassName("leaflet-control-container")[0].getElementsByClassName("container " + controlerDiv + "-info")[0];
      layerSwitchForm = L.DomUtil.create("form");
      layerSwitchInput = L.DomUtil.create("input", "layerSwitch", layerSwitchForm);
      $(layerSwitchInput).attr("type", "button");
      $(layerSwitchInput).attr("position", "absolute");
      $(layerSwitchInput).attr("top", "0px");
      $(layerSwitchInput).attr("right", "0px");
      $(layerSwitchInput).attr("name", "layerSwitch");
      $(layerSwitchInput).attr("value", "By Object1");
      L.DomEvent.addListener(layerSwitchInput, 'click', (function(_this) {
        return function(e) {};
      })(this));
      layerSwitchInputRem = L.DomUtil.create("input", "layerSwitch", layerSwitchForm);
      $(layerSwitchInputRem).attr("type", "button");
      $(layerSwitchInputRem).attr("name", "layerSwitchRem");
      $(layerSwitchInputRem).attr("value", "remove");
      controlerDivEl.appendChild(layerSwitchForm);
      return L.DomEvent.addListener(layerSwitchInputRem, 'click', (function(_this) {
        return function(e) {
          var first, last, _ref;
          e.preventDefault();
          e.stopPropagation();
          return _ref = _this._m._layers, first = _ref[0], last = _ref[_ref.length - 1], _ref;
        };
      })(this));
    },
    makeLayerController: function() {
      return L.control.layers({
        "Base Map": L.mapbox.tileLayer("arminavn.ib1f592g").addTo(this._m),
        "Open Street": L.mapbox.tileLayer("arminavn.jl495p2g")
      }).addTo(this._m);
    },
    makeSlider: function() {
      return this.makeDiv({
        position: "topright",
        className: "container slider-info"
      });
    },
    loadLayer: function(layer) {
      var geojsonLayer;
      geojsonLayer = new L.GeoJSON.AJAX(layer);
      geojsonLayer.onAdd(function(map) {});
    },
    showPathDirection: function(map) {
      var circle_options, drawControl, featureGroup, polyline_options;
      featureGroup = L.featureGroup().addTo(map);
      circle_options = {
        color: "#fff",
        opacity: 1,
        weight: 10,
        fillColor: "#000",
        fillOpacity: 0.6
      };
      polyline_options = {
        color: "#000"
      };
      drawControl = new L.Control.Draw({
        position: "topright",
        edit: {
          featureGroup: featureGroup
        }
      });
      map.on("draw:created", (function(_this) {
        return function(e) {
          var latLngs, layer, type;
          featureGroup.addLayer(e.layer);
          type = e.layerType;
          layer = e.layer;
          latLngs = void 0;
          if (type === "circle") {
            latLngs = layer.getLatLng();
          } else if (type === "marker") {
            latLngs = layer._latlng;
          } else {
            latLngs = layer.getLatLngs();
          }
          _this.getDirectionsFromGoogle(latLngs);
        };
      })(this));
      return drawControl;
    },
    groupBy: function() {
      var features, monthNameFormat, nest;
      monthNameFormat = d3.time.format("%B");
      features = this._geoJson.features.map(function(d) {
        return new Date(d3.time.format.iso.parse(d.properties.date_time));
      });
      nest = d3.nest().key(function(d) {
        return monthNameFormat(d);
      }).rollup(function(d) {
        return d.length;
      }).entries(features);
      return nest;
    },
    timeserries: function() {
      var all_dates, chart, container, counts, e, height, map, margin, months, values, width;
      counts = this.groupBy();
      all_dates = [];
      values = [];
      d3.map(counts).forEach((function(_this) {
        return function(index, value) {
          values.push(value.values);
          return all_dates.push(value.key);
        };
      })(this));
      months = [];
      all_dates.shift();
      values.shift();
      all_dates.shift();
      values.shift();
      all_dates.unshift("x");
      values.unshift("Accident Frequency");
      try {
        container = L.DomUtil.get(document.getElementsByClassName("container control-info")[0]);
      } catch (_error) {
        e = _error;
        this.makeDiv("control", "bottomleft");
        container = L.DomUtil.get(document.getElementsByClassName("container control-info")[0]);
      }
      margin = {
        top: 5,
        right: 5,
        bottom: 40,
        left: 45
      };
      width = 960 - margin.left - margin.right;
      height = 80;
      d3.select(container).append("div").attr("id", "chart");
      console.log(values, all_dates);
      chart = c3.generate({
        data: {
          onmouseover: (function(_this) {
            return function(d, element) {
              return _this.makeHeatMap(d);
            };
          })(this),
          x: "x",
          xFormat: "%B",
          columns: [all_dates, values]
        },
        axis: {
          x: {
            type: "timeseries",
            tick: {
              format: d3.time.format("%B")
            }
          }
        },
        size: {
          height: $(this._m.getContainer())[0].clientHeight / 4,
          width: $(this._m.getContainer())[0].clientWidth - 100
        }
      });
      setTimeout((function() {
        chart.load({
          columns: []
        });
      }), 1000);
      map = this._m;
      return L.pointsLayer(this._geoJson, {
        applyStyle: this._circle_style
      }).addTo(map);
    },
    _circle_style: function(circles) {
      circles.attr("opacity", 0.4).attr("stroke", 1).attr("stroke-width", 1).attr("fill", "red");
    },
    parseGeoJson: function() {
      var each, _i, _len, _ref, _results;
      this._geoJson = {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            geometry: {
              type: "Point",
              coordinates: [0.0, 0.0]
            },
            properties: {
              prop0: "value0"
            }
          }
        ]
      };
      _ref = this.text;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        each = _ref[_i];
        if (each.coordinates.latitude !== "0") {
          _results.push(this._geoJson.features.push({
            "type": "Feature",
            "geometry": {
              "type": "point",
              "coordinates": [+each.coordinates.longitude, +each.coordinates.latitude]
            },
            "properties": each
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    makeMap: function() {
      var drawControl, map, textControl;
      map = $("body").append("<div id='map'></div>");
      L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";
      this._m = L.mapbox.map("map", {
        zoomAnimation: true,
        zoomAnimationThreshold: 4,
        inertiaDeceleration: 4000,
        animate: true,
        duration: 1.75,
        easeLinearity: 0.1
      }).setView([42.36653483201389, -71.12146908569336], 13);
      this.makeLayerController();
      this._m.boxZoom.enable();
      this._m.scrollWheelZoom.disable();
      drawControl = this.showPathDirection(this._m);
      textControl = L.Control.extend({
        options: {
          position: "topleft"
        },
        onAdd: (function(_this) {
          return function(map) {
            var disable3D, timeout;
            _this._m = map;
            _this._textDomEl = L.DomUtil.create('div', 'container paratext-info');
            _this._el = L.DomUtil.create('svg', 'svg');
            _this._m.getPanes().overlayPane.appendChild(_this._el);
            L.DomUtil.enableTextSelection(_this._textDomEl);
            _this._m.getPanes().overlayPane.appendChild(_this._textDomEl);
            _this._textDomObj = $(L.DomUtil.get(_this._textDomEl));
            _this._textDomObj.css('width', $(_this._m.getContainer())[0].clientWidth / 4);
            _this._textDomObj.css('height', $(_this._m.getContainer())[0].clientHeight);
            _this._textDomObj.css('background-color', 'white');
            _this._textDomObj.css('overflow', 'scroll');
            L.DomUtil.setOpacity(L.DomUtil.get(_this._textDomEl), 0.8);
            if (_this._viewSet === void 0) {
              _this._viewSet = _this._m.getCenter();
            }
            L.DomUtil.setPosition(L.DomUtil.get(_this._textDomEl), L.point(40, -65), disable3D = 0);
            _this._d3text = d3.select(".paratext-info").append("ul").style("list-style-type", "none").style("padding-left", "0px").attr("width", $(_this._m.getContainer())[0].clientWidth / 4).attr("height", $(_this._m.getContainer())[0].clientHeight - 80);
            _this._d3li = _this._d3text.selectAll("li").data(_this.text).enter().append("li");
            _this._d3li.style("font-family", "Helvetica").style("line-height", "2").style("margin-top", "10px").style("padding-right", "20px").style("padding-left", "40px").attr("id", function(d, i) {
              return "line-" + i;
            }).text(function(d, i) {
              var timeout;
              _this._leafletli = L.DomUtil.get("line-" + i);
              timeout = void 0;
              L.DomEvent.addListener(_this._leafletli, 'click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return _this._m.setView(new L.LatLng(d.coordinates.latitude, d.coordinates.longitude), 19, {
                  animation: true,
                  duration: 50
                });
              });
              L.DomEvent.addListener(_this._leafletli, 'mouseout', function(e) {
                var data;
                e.preventDefault();
                e.stopPropagation();
                timeout = 0;
                this._g = d3.select(_this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g");
                data = [];
                return this._g.data(data).exit().remove();
              });
              L.DomEvent.addListener(_this._leafletli, 'mouseover', function(e) {
                e.preventDefault();
                e.stopPropagation();
                $(this).css('cursor', 'pointer');
                L.stamp(_this._leafletli);
                timeout = setTimeout(function() {
                  _this._m._initPathRoot();
                  if (timeout !== 0) {
                    _this.removeAnyLocation();
                    _this.showLocation(d);
                    return timeout = 0;
                  }
                }, 800);
              }, function() {});
              return d.date_time;
            }).style("font-size", "16px").style("color", "rgb(72,72,72)").on("mouseover", function(d, i) {
              $(this).css('cursor', 'pointer');
              d3.select(this).transition().duration(0).style("color", "black").style("background-color", "rgb(208,208,208) ").style("opacity", 1);
            }).on("mouseout", function(d, i) {
              d3.select(this).transition().duration(1000).style("color", "rgb(72,72,72)").style("background-color", "white").style("opacity", 1);
            }).transition().duration(1).delay(1).style("opacity", 1);
            _this._m.whenReady(function() {});
            timeout = void 0;
            L.stamp(_this._leafletli);
            _this._m._initPathRoot();
            return _this._textDomEl;
          };
        })(this)
      });
      return this._m;
    },
    connectRelation: function() {
      return this.raw_text = this.properties.text;
    }
  });

  L.paratext = function(text) {
    return new L.ParaText(text);
  };

  addChainedAttributeAccessor = function(obj, propertyAttr, attr) {
    return obj[attr] = function() {
      var newValues;
      newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (newValues.length === 0) {
        return obj[propertyAttr][attr];
      } else {
        obj[propertyAttr][attr] = newValues[0];
        return obj;
      }
    };
  };

  queue().defer(d3.json, "https://data.cambridgema.gov/resource/ybny-g9cv.json").await(function(err, texts) {
    draw(texts);
  });

  draw = function(data) {
    var control, d3onmap, paratext, textmap, timeout, timeserries;
    paratext = L.paratext(data);
    textmap = paratext.makeMap();
    paratext.parseGeoJson();
    d3onmap = paratext.makeD3onMap();
    control = paratext.makeDiv("control", "bottomleft");
    timeserries = paratext.timeserries();
    return timeout = void 0;
  };

  timeout = 0;

}).call(this);
