// Generated by CoffeeScript 1.7.1
(function() {
  var addChainedAttributeAccessor, draw,
    __slice = [].slice;

  L.ParaText = L.Class.extend({
    initialize: function(text) {
      this.text = text;
      this.properties = {
        id: 0,
        members: [],
        _margin: {
          t: 20,
          l: 30,
          b: 30,
          r: 30
        },
        relations: {},
        lat: 0,
        long: 0
      };
    },
    addTo: function(map) {
      map.addLayer(this);
      return this;
    },
    customTimeFormat: function(d) {
      var format;
      format = d3.time.format.multi([
        [
          ".%L", function(d) {
            return d.getMilliseconds();
          }
        ], [
          ":%S", function(d) {
            return d.getSeconds();
          }
        ], [
          "%I:%M", function(d) {
            return d.getMinutes();
          }
        ], [
          "%I %p", function(d) {
            return d.getHours();
          }
        ], [
          "%a %d", function(d) {
            return d.getDay() && d.getDate() !== 1;
          }
        ], [
          "%b %d", function(d) {
            return d.getDate() !== 1;
          }
        ], [
          "%B", function(d) {
            return d.getMonth();
          }
        ], [
          "%Y", function() {
            return true;
          }
        ]
      ]);
      return format(d);
    },
    removeAnyLocation: function() {
      return d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g").data([]).exit().remove();
    },
    _projectPoint: function(x) {
      var point;
      point = this._m.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
      return [point.x, point.y];
    },
    showLocation: function(d) {
      var featureData;
      featureData = [];
      featureData.push(new L.LatLng(d.coordinates.latitude, d.coordinates.longitude));
      this._g = d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g");
      return this._g.data(featureData).enter().append("g").append("circle").attr("r", 0).attr("stroke", "white").attr("fill", "none").attr("stroke-width", "10").attr("cx", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).x;
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).y;
        };
      })(this)).transition().delay(120).duration(1000).attr("r", 80).attr("stroke", "gray").attr("stroke-width", "0").attr("fill", "none");
    },
    formatTime: function(arg) {
      var HourNameFormat, dayNameFormat, monthNameFormat;
      if (arg === "month") {
        return monthNameFormat = d3.time.format("%B");
      } else if (arg === "day") {
        return dayNameFormat = d3.time.format("%Y-%m-%d");
      } else if (arg === "hour") {
        return HourNameFormat = d3.time.format("%H");
      }
    },
    makeHeatMap: function(d, max_zoom, time_interval) {
      var coordinates, draw, e, key, timeout, value, _ref, _ref1;
      if (this._heat) {
        this._m.removeLayer(this._heat);
      }
      this.formatTime(time_interval);
      console.log(d);
      draw = true;
      coordinates = [];
      if (d === this.text) {
        _ref = this.text;
        for (key in _ref) {
          value = _ref[key];
          try {
            coordinates.push(new L.LatLng(value.coordinates.latitude, value.coordinates.longitude));
          } catch (_error) {
            e = _error;
            coordinates.push(new L.LatLng(value.address.latitude, value.address.longitude));
          }
        }
      } else {
        _ref1 = this.text;
        for (key in _ref1) {
          value = _ref1[key];
          try {
            if (this.formatTime(time_interval)(new Date(d3.time.format.iso.parse(value.date_time))) === this.formatTime(time_interval)(d.x)) {
              coordinates.push(new L.LatLng(value.coordinates.latitude, value.coordinates.longitude));
            }
          } catch (_error) {
            e = _error;
            if (this.formatTime(time_interval)(new Date(d3.time.format.iso.parse(value.date_time))) === this.formatTime(time_interval)(d.x)) {
              coordinates.push(new L.LatLng(value.address.latitude, value.address.longitude));
            }
          }
        }
      }
      this._heat = L.heatLayer(coordinates, {
        maxZoom: max_zoom
      });
      this._heat.addTo(this._m);
      timeout = void 0;
      if (this._viewSet === void 0) {
        this._viewSet = this._m.getCenter();
      }
      if (this._viewZoom === void 0) {
        this._zoomSet = this._m.getZoom();
      }
      this._m.on("load", function() {});
      this._m.setView(new L.LatLng(this._viewSet.lat, this._viewSet.lng), this._viewZoom);
      return;
      return this._m.on({
        zoomend: (function(_this) {
          return function() {
            if (_this._m.getZoom() > 16) {
              _this._m.removeLayer(_this._heat);
            }
            if (_this._m.getZoom() < 16) {
              return _this._m.addLayer(_this._heat);
            }
          };
        })(this),
        movestart: function() {
          draw = false;
        },
        moveend: function() {
          draw = true;
        },
        mousemove: (function(_this) {
          return function(e) {};
        })(this)
      });
    },
    makeDiv: function(name, position) {
      var divControl, legend;
      divControl = L.Control.extend({
        initialize: (function(_this) {
          return function() {
            var disable3D, _domEl, _domObj;
            _domEl = L.DomUtil.create('div', "container " + name + "-info");
            L.DomUtil.enableTextSelection(_domEl);
            _this._m.getContainer().getElementsByClassName("leaflet-control-container")[0].appendChild(_domEl);
            _domObj = $(L.DomUtil.get(_domEl));
            _domObj.css('width', $(_this._m.getContainer())[0].clientWidth);
            _domObj.css('height', $(_this._m.getContainer())[0].clientHeight / 4);
            _domObj.css('background-color', 'black');
            L.DomUtil.setOpacity(L.DomUtil.get(_domEl), 1);
            return L.DomUtil.setPosition(L.DomUtil.get(_domEl), L.point(0, $(_this._m.getContainer())[0].clientHeight / 2 + $(_this._m.getContainer())[0].clientHeight / 4), disable3D = 0);
          };
        })(this)
      });
      legend = L.control({
        position: "bottomright"
      });
      legend.onAdd = (function(_this) {
        return function(map) {
          var div;
          div = L.DomUtil.create("div", "info legend");
          div.innerHTML = "<form class='target'><select class='target'><option>by month</option><option>by day</option><option>hour</option></select></form>";
          L.DomEvent.on(div.firstChild.firstElementChild, "change", function(e) {
            var all_dates, counts, months, values;
            console.log(this, _this);
            if (this.value !== "none") {
              console.log(this.value);
              _this._chart.unload();
              counts = _this.groupBy("date_time", this.value.replace('by ', ''));
              all_dates = [];
              values = [];
              d3.map(counts).forEach((function(_this) {
                return function(index, value) {
                  console.log(d3.time.format("%Y-%m-%d").parse(value.key));
                  values.push(value.values);
                  return all_dates.push(value.key);
                };
              })(this));
              months = [];
              all_dates.shift();
              values.shift();
              all_dates.shift();
              values.shift();
              all_dates.unshift("x");
              values.unshift("Accident Frequency");
              _this._chart.load({
                columns: [values, all_dates]
              });
            } else {
              console.log("kldkd!!");
            }
          });
          div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
          return div;
        };
      })(this);
      new divControl();
      return legend.addTo(this._m);
    },
    makeLayerController: function() {
      return L.control.layers({
        "Base Map": L.mapbox.tileLayer("arminavn.ib1f592g").addTo(this._m),
        "Open Street": L.mapbox.tileLayer("arminavn.jl495p2g")
      }).addTo(this._m);
    },
    groupBy: function(by_field, timearg) {
      var dayNameFortmat, features, monthNameFormat, nest;
      monthNameFormat = d3.time.format("%B");
      dayNameFortmat = d3.time.format("%a");
      if (by_field = "date_time") {
        features = this._geoJson.features.map(function(d) {
          return new Date(d3.time.format.iso.parse(d.properties.date_time));
        });
        nest = d3.nest().key((function(_this) {
          return function(d) {
            return _this.formatTime(timearg)(d);
          };
        })(this)).sortKeys(function(d) {}).rollup(function(d) {
          return d.length;
        }).entries(features);
      } else {
        features = this._geoJson.features.map(function(d) {
          return d;
        });
        nest = d3.nest().key(function(d) {
          return "d.properties." + by_field;
        }).rollup(function(d) {
          return d.length;
        }).entries(features);
      }
      return nest;
    },
    timeserries: function(timearg) {
      var all_dates, container, counts, e, height, margin, months, timeformater, values, width;
      counts = this.groupBy("date_time", timearg);
      all_dates = [];
      values = [];
      d3.map(counts).forEach((function(_this) {
        return function(index, value) {
          values.push(value.values);
          return all_dates.push(value.key);
        };
      })(this));
      months = [];
      all_dates.shift();
      values.shift();
      all_dates.shift();
      values.shift();
      all_dates.unshift("x");
      values.unshift("Accident Frequency");
      if (timearg === "month") {
        timeformater = "%B";
      } else if (timearg === "day") {
        timeformater = "%Y-%m-%d";
      } else if (timearg === "hour") {
        timeformater = "%H";
      }
      try {
        container = L.DomUtil.get(document.getElementsByClassName("container control-info")[0]);
      } catch (_error) {
        e = _error;
        this.makeDiv("control", "bottomleft");
        container = L.DomUtil.get(document.getElementsByClassName("container control-info")[0]);
      }
      L.DomUtil.enableTextSelection(container);
      L.DomEvent.on(container, "mouseover", (function(_this) {
        return function(e) {
          _this._m.dragging.disable();
        };
      })(this));
      L.DomEvent.on(container, "mouseout", (function(_this) {
        return function(e) {
          _this._m.dragging.enable();
        };
      })(this));
      margin = {
        top: 5,
        right: 5,
        bottom: 40,
        left: 45
      };
      width = 960 - margin.left - margin.right;
      height = 80;
      d3.select(container).append("div").attr("id", "chart");
      console.log(values, all_dates);
      console.log("chart", this._chart);
      if (this._chart !== void 0) {
        this._chart.unload("x", "Accident Frequency");
        this._chart.load({
          columns: [values, all_dates]
        });
        return;
      } else {
        this._chart = c3.generate({
          data: {
            onmouseover: (function(_this) {
              return function(d, element) {
                return _this.makeHeatMap(d, 17, timearg);
              };
            })(this),
            x: "x",
            xFormat: timeformater,
            columns: [all_dates, values]
          },
          axis: {
            x: {
              type: "timeseries",
              tick: {
                format: d3.time.format(timeformater)
              }
            }
          },
          size: {
            height: $(this._m.getContainer())[0].clientHeight / 4,
            width: $(this._m.getContainer())[0].clientWidth - 100
          },
          legend: {
            item: {
              onmouseover: (function(_this) {
                return function() {
                  return _this.makeHeatMap(_this.text, 19, timearg);
                };
              })(this),
              onmouseout: (function(_this) {
                return function() {
                  _this.makeHeatMap([]);
                  return {
                    tooltip: {
                      content: "Show All",
                      show: true
                    }
                  };
                };
              })(this)
            }
          }
        });
        this._chart.unload();
        setTimeout(((function(_this) {
          return function() {
            _this._chart.load({
              columns: [values]
            });
          };
        })(this)), 1000);
        return chart;
      }
      all_dates = [];
      values = [];
    },
    parseGeoJson: function() {
      var each, _i, _len, _ref, _results;
      this._geoJson = {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            geometry: {
              type: "Point",
              coordinates: [0.0, 0.0]
            },
            properties: {
              prop0: "value0"
            }
          }
        ]
      };
      _ref = this.text;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        each = _ref[_i];
        if (each.coordinates.latitude !== "0") {
          _results.push(this._geoJson.features.push({
            "type": "Feature",
            "geometry": {
              "type": "point",
              "coordinates": [+each.coordinates.longitude, +each.coordinates.latitude]
            },
            "properties": each
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    makeMap: function() {
      var map;
      map = $("body").append("<div id='map'></div>");
      L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";
      this._m = L.mapbox.map("map", {
        zoomAnimation: true,
        zoomAnimationThreshold: 4,
        inertiaDeceleration: 4000,
        animate: true,
        duration: 1.75,
        easeLinearity: 0.1
      }).setView([42.36653483201389, -71.12146908569336], 14);
      this.makeLayerController();
      this._m.boxZoom.enable();
      this._m.scrollWheelZoom.disable();
      return this._m;
    },
    connectRelation: function() {
      return this.raw_text = this.properties.text;
    }
  });

  L.paratext = function(text) {
    return new L.ParaText(text);
  };

  addChainedAttributeAccessor = function(obj, propertyAttr, attr) {
    return obj[attr] = function() {
      var newValues;
      newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (newValues.length === 0) {
        return obj[propertyAttr][attr];
      } else {
        obj[propertyAttr][attr] = newValues[0];
        return obj;
      }
    };
  };

  queue().defer(d3.json, "https://data.cambridgema.gov/resource/ybny-g9cv.json?$limit=50000").await(function(err, texts) {
    draw(texts);
  });

  draw = function(data) {
    var control, paratext, serries, textmap, timeout;
    serries = ["hour", "day", "month"];
    paratext = L.paratext(data);
    textmap = paratext.makeMap();
    paratext.parseGeoJson();
    control = paratext.makeDiv("control", "bottomleft");
    timeout = void 0;
    return paratext.timeserries("month");
  };

  $(document).ready(function() {});

}).call(this);
